Design Choices :

The design choices for this quiz system include structuring it around multiple-choice questions, with each question offering four options (A, B, C, D).
There are 5 questions per quiz, providing coverage across various aspects of the chosen topic. Immediate feedback is given after each question, detailing both
correct answers and explanations. Scoring is based on correct/incorrect responses, adding 20 marks for correct answers and deducting 10 marks for incorrect ones.
Scores range from 0 to 100, with corresponding proficiency levels.

Users are welcomed with an introductory message outlining the quiz structure, scoring, and proficiency levels. They select their desired topicâ€”Django, Machine Learning,
or Data Analysis. The system then prompts users to answer 5 multiple-choice questions based on their chosen topic.The level of the questions increases in ascending order.
Immediate feedback is provided for each answer, and a final score is displayed at the end, along with the corresponding proficiency level. Input validation ensures only
valid choices are accepted, and an exit option allows users to leave the quiz at any point.

Challenges in developing this system involved input validation to handle unexpected inputs, designing clear instructions and feedback for a smooth user experience,
creating an accurate scoring system, generating informative feedback, ensuring comprehensive topic coverage, and formatting output for readability.Potential enhancements
could involve integrating a graphical user interface for a more interactive experience, incorporating a database to store user progress,
randomizing question order to add variety, implementing a time limit per question for added challenge, and expanding the quiz to cover more topics and questions.

Summary :

    1. Quiz Structure:
       - Multiple-choice questions: Each question with four options (A, B, C, D).
       - 5 questions per quiz: Covering different facets of the chosen topic and the difficulty level of the questions increases in the ascending order of the question nums.
       - Feedback: Offers information on correct answers and explanations.

    2. Scoring Mechanism:
       - Correct answers: Add 20 marks to the score.
       - Incorrect answers: Deduct 10 marks from the score.
       - Score calculation: Ranges from 0 to 100 (20 marks per correct answer).
       - Proficiency levels based on score ranges.

    3. User Interaction:
       - Welcome message: Introduces the quiz, scoring, and proficiency levels.
       - Topic selection: Presents options (Django, Machine Learning, Data Analysis).
       - User input: Accepts user responses to questions.

    4. Output:
       - Correctness feedback: Immediate feedback on each answer.
       - Final score and proficiency: Displays the score and proficiency level.
       - Exit option: Allows users to end the quiz.

    Features:

    - Introduction: Welcomes users and provides quiz details.
    - Topic Selection: Allows choosing between Django, Machine Learning, and Data Analysis.
    - Questionnaire: Asks 5 multiple-choice questions based on the chosen topic.
    - Answer Evaluation: Checks answers and provides immediate feedback.
    - Final Score Display: Shows the score and corresponding proficiency level.
    - Input Validation: Ensures only valid choices are accepted.
    - Exit Option: Allows users to leave the quiz at any point.

    Challenges Encountered:

    - Input Validation: Ensuring the program handles unexpected inputs without errors.
    - User Experience: Crafting clear instructions and feedback for an intuitive user experience.
    - Feedback Generation: Creating informative feedback for both correct and incorrect answers.
    - Topic Coverage: Ensuring questions cover different aspects of the chosen topic well.
    - Output Formatting: Ensuring readability of output for correct and incorrect answers.

    Potential Enhancements:

    - GUI Integration: Creating a more interactive and visually appealing interface.
    - Database Integration: Storing questions, answers, and user scores for tracking progress.
    - Randomizing Questions: Shuffling the order of questions for variety.
    - Time Limit: Adding a time limit per question to increase challenge.
    - More Topics & Questions: Expanding the quiz to cover a broader range of topics with more questions.


Conclusion :

    The current code serves as a functional text-based quiz system. It offers a solid foundation for further improvements, including GUI integration, database usage,
    question randomization, and topic expansion, which would significantly enhance the user experience and learning potential of the system. Refining feedback and
    validation mechanisms could further elevate its educational value and user-friendliness.